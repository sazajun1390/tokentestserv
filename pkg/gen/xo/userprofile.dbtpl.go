package xo

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// UserProfile represents a row from 'public.user_profiles'.
type UserProfile struct {
	UserID          int64          `json:"user_id"`           // user_id
	UserMultiID     string         `json:"user_multi_id"`     // user_multi_id
	ResourceID      string         `json:"resource_id"`       // resource_id
	Email           string         `json:"email"`             // email
	Password        string         `json:"password"`          // password
	Tel             sql.NullString `json:"tel"`               // tel
	CreatedAt       time.Time      `json:"created_at"`        // created_at
	UpdatedAt       time.Time      `json:"updated_at"`        // updated_at
	DeletedAt       sql.NullTime   `json:"deleted_at"`        // deleted_at
	PurgedExpiresAt sql.NullTime   `json:"purged_expires_at"` // purged_expires_at
}

// UserProfileByEmail retrieves a row from 'public.user_profiles' as a [UserProfile].
//
// Generated from index 'user_profiles_email_key'.
func UserProfileByEmail(ctx context.Context, db DB, email string) (*UserProfile, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, user_multi_id, resource_id, email, password, tel, created_at, updated_at, deleted_at, purged_expires_at ` +
		`FROM public.user_profiles ` +
		`WHERE email = $1`
	// run
	logf(sqlstr, email)
	up := UserProfile{}
	if err := db.QueryRowContext(ctx, sqlstr, email).Scan(&up.UserID, &up.UserMultiID, &up.ResourceID, &up.Email, &up.Password, &up.Tel, &up.CreatedAt, &up.UpdatedAt, &up.DeletedAt, &up.PurgedExpiresAt); err != nil {
		return nil, logerror(err)
	}
	return &up, nil
}

// UserProfileByResourceID retrieves a row from 'public.user_profiles' as a [UserProfile].
//
// Generated from index 'user_profiles_resource_id_key'.
func UserProfileByResourceID(ctx context.Context, db DB, resourceID string) (*UserProfile, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, user_multi_id, resource_id, email, password, tel, created_at, updated_at, deleted_at, purged_expires_at ` +
		`FROM public.user_profiles ` +
		`WHERE resource_id = $1`
	// run
	logf(sqlstr, resourceID)
	up := UserProfile{}
	if err := db.QueryRowContext(ctx, sqlstr, resourceID).Scan(&up.UserID, &up.UserMultiID, &up.ResourceID, &up.Email, &up.Password, &up.Tel, &up.CreatedAt, &up.UpdatedAt, &up.DeletedAt, &up.PurgedExpiresAt); err != nil {
		return nil, logerror(err)
	}
	return &up, nil
}

// UserProfileByUserID retrieves a row from 'public.user_profiles' as a [UserProfile].
//
// Generated from index 'user_profiles_user_id_key'.
func UserProfileByUserID(ctx context.Context, db DB, userID int64) (*UserProfile, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, user_multi_id, resource_id, email, password, tel, created_at, updated_at, deleted_at, purged_expires_at ` +
		`FROM public.user_profiles ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	up := UserProfile{}
	if err := db.QueryRowContext(ctx, sqlstr, userID).Scan(&up.UserID, &up.UserMultiID, &up.ResourceID, &up.Email, &up.Password, &up.Tel, &up.CreatedAt, &up.UpdatedAt, &up.DeletedAt, &up.PurgedExpiresAt); err != nil {
		return nil, logerror(err)
	}
	return &up, nil
}

// UserProfileByUserMultiID retrieves a row from 'public.user_profiles' as a [UserProfile].
//
// Generated from index 'user_profiles_user_multi_id_key'.
func UserProfileByUserMultiID(ctx context.Context, db DB, userMultiID string) (*UserProfile, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, user_multi_id, resource_id, email, password, tel, created_at, updated_at, deleted_at, purged_expires_at ` +
		`FROM public.user_profiles ` +
		`WHERE user_multi_id = $1`
	// run
	logf(sqlstr, userMultiID)
	up := UserProfile{}
	if err := db.QueryRowContext(ctx, sqlstr, userMultiID).Scan(&up.UserID, &up.UserMultiID, &up.ResourceID, &up.Email, &up.Password, &up.Tel, &up.CreatedAt, &up.UpdatedAt, &up.DeletedAt, &up.PurgedExpiresAt); err != nil {
		return nil, logerror(err)
	}
	return &up, nil
}

// User returns the User associated with the [UserProfile]'s (UserID).
//
// Generated from foreign key 'user_profiles_user_id_fkey'.
func (up *UserProfile) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, up.UserID)
}
