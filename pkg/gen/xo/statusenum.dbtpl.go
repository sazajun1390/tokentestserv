package xo

// Code generated by dbtpl. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// StatusEnum is the 'status_enum' enum type from schema 'public'.
type StatusEnum uint16

// StatusEnum values.
const (
	// StatusEnumActive is the 'active' status_enum.
	StatusEnumActive StatusEnum = 1
	// StatusEnumProvisioning is the 'provisioning' status_enum.
	StatusEnumProvisioning StatusEnum = 2
	// StatusEnumInactive is the 'inactive' status_enum.
	StatusEnumInactive StatusEnum = 3
	// StatusEnumDeleted is the 'deleted' status_enum.
	StatusEnumDeleted StatusEnum = 4
	// StatusEnumPurged is the 'purged' status_enum.
	StatusEnumPurged StatusEnum = 5
	// StatusEnumUnspecified is the 'unspecified' status_enum.
	StatusEnumUnspecified StatusEnum = 6
)

// String satisfies the [fmt.Stringer] interface.
func (se StatusEnum) String() string {
	switch se {
	case StatusEnumActive:
		return "active"
	case StatusEnumProvisioning:
		return "provisioning"
	case StatusEnumInactive:
		return "inactive"
	case StatusEnumDeleted:
		return "deleted"
	case StatusEnumPurged:
		return "purged"
	case StatusEnumUnspecified:
		return "unspecified"
	}
	return fmt.Sprintf("StatusEnum(%d)", se)
}

// MarshalText marshals [StatusEnum] into text.
func (se StatusEnum) MarshalText() ([]byte, error) {
	return []byte(se.String()), nil
}

// UnmarshalText unmarshals [StatusEnum] from text.
func (se *StatusEnum) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "active":
		*se = StatusEnumActive
	case "provisioning":
		*se = StatusEnumProvisioning
	case "inactive":
		*se = StatusEnumInactive
	case "deleted":
		*se = StatusEnumDeleted
	case "purged":
		*se = StatusEnumPurged
	case "unspecified":
		*se = StatusEnumUnspecified
	default:
		return ErrInvalidStatusEnum(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (se StatusEnum) Value() (driver.Value, error) {
	return se.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (se *StatusEnum) Scan(v any) error {
	switch x := v.(type) {
	case []byte:
		return se.UnmarshalText(x)
	case string:
		return se.UnmarshalText([]byte(x))
	}
	return ErrInvalidStatusEnum(fmt.Sprintf("%T", v))
}

// NullStatusEnum represents a null 'status_enum' enum for schema 'public'.
type NullStatusEnum struct {
	StatusEnum StatusEnum
	// Valid is true if [StatusEnum] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nse NullStatusEnum) Value() (driver.Value, error) {
	if !nse.Valid {
		return nil, nil
	}
	return nse.StatusEnum.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nse *NullStatusEnum) Scan(v any) error {
	if v == nil {
		nse.StatusEnum, nse.Valid = 0, false
		return nil
	}
	err := nse.StatusEnum.Scan(v)
	nse.Valid = err == nil
	return err
}

// ErrInvalidStatusEnum is the invalid [StatusEnum] error.
type ErrInvalidStatusEnum string

// Error satisfies the error interface.
func (err ErrInvalidStatusEnum) Error() string {
	return fmt.Sprintf("invalid StatusEnum(%s)", string(err))
}
