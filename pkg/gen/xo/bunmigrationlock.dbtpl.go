package xo

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
)

// BunMigrationLock represents a row from 'public.bun_migration_locks'.
type BunMigrationLock struct {
	ID        int64          `json:"id"`         // id
	TableName sql.NullString `json:"table_name"` // table_name
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [BunMigrationLock] exists in the database.
func (bml *BunMigrationLock) Exists() bool {
	return bml._exists
}

// Deleted returns true when the [BunMigrationLock] has been marked for deletion
// from the database.
func (bml *BunMigrationLock) Deleted() bool {
	return bml._deleted
}

// Insert inserts the [BunMigrationLock] to the database.
func (bml *BunMigrationLock) Insert(ctx context.Context, db DB) error {
	switch {
	case bml._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case bml._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.bun_migration_locks (` +
		`table_name` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`
	// run
	logf(sqlstr, bml.TableName)
	if err := db.QueryRowContext(ctx, sqlstr, bml.TableName).Scan(&bml.ID); err != nil {
		return logerror(err)
	}
	// set exists
	bml._exists = true
	return nil
}

// Update updates a [BunMigrationLock] in the database.
func (bml *BunMigrationLock) Update(ctx context.Context, db DB) error {
	switch {
	case !bml._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case bml._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.bun_migration_locks SET ` +
		`table_name = $1 ` +
		`WHERE id = $2`
	// run
	logf(sqlstr, bml.TableName, bml.ID)
	if _, err := db.ExecContext(ctx, sqlstr, bml.TableName, bml.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [BunMigrationLock] to the database.
func (bml *BunMigrationLock) Save(ctx context.Context, db DB) error {
	if bml.Exists() {
		return bml.Update(ctx, db)
	}
	return bml.Insert(ctx, db)
}

// Upsert performs an upsert for [BunMigrationLock].
func (bml *BunMigrationLock) Upsert(ctx context.Context, db DB) error {
	switch {
	case bml._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.bun_migration_locks (` +
		`id, table_name` +
		`) VALUES (` +
		`$1, $2` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`table_name = EXCLUDED.table_name `
	// run
	logf(sqlstr, bml.ID, bml.TableName)
	if _, err := db.ExecContext(ctx, sqlstr, bml.ID, bml.TableName); err != nil {
		return logerror(err)
	}
	// set exists
	bml._exists = true
	return nil
}

// Delete deletes the [BunMigrationLock] from the database.
func (bml *BunMigrationLock) Delete(ctx context.Context, db DB) error {
	switch {
	case !bml._exists: // doesn't exist
		return nil
	case bml._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.bun_migration_locks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, bml.ID)
	if _, err := db.ExecContext(ctx, sqlstr, bml.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	bml._deleted = true
	return nil
}

// BunMigrationLockByID retrieves a row from 'public.bun_migration_locks' as a [BunMigrationLock].
//
// Generated from index 'bun_migration_locks_pkey'.
func BunMigrationLockByID(ctx context.Context, db DB, id int64) (*BunMigrationLock, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, table_name ` +
		`FROM public.bun_migration_locks ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	bml := BunMigrationLock{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&bml.ID, &bml.TableName); err != nil {
		return nil, logerror(err)
	}
	return &bml, nil
}

// BunMigrationLockByTableName retrieves a row from 'public.bun_migration_locks' as a [BunMigrationLock].
//
// Generated from index 'bun_migration_locks_table_name_key'.
func BunMigrationLockByTableName(ctx context.Context, db DB, tableName sql.NullString) (*BunMigrationLock, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, table_name ` +
		`FROM public.bun_migration_locks ` +
		`WHERE table_name = $1`
	// run
	logf(sqlstr, tableName)
	bml := BunMigrationLock{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, tableName).Scan(&bml.ID, &bml.TableName); err != nil {
		return nil, logerror(err)
	}
	return &bml, nil
}
