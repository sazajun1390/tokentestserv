package xo

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"time"
)

// UserActive represents a row from 'public.user_actives'.
type UserActive struct {
	UserID    int64      `json:"user_id"`    // user_id
	Status    StatusEnum `json:"status"`     // status
	CreatedAt time.Time  `json:"created_at"` // created_at
	UpdatedAt time.Time  `json:"updated_at"` // updated_at
}

// UserActiveByUserID retrieves a row from 'public.user_actives' as a [UserActive].
//
// Generated from index 'user_actives_user_id_key'.
func UserActiveByUserID(ctx context.Context, db DB, userID int64) (*UserActive, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, status, created_at, updated_at ` +
		`FROM public.user_actives ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	ua := UserActive{}
	if err := db.QueryRowContext(ctx, sqlstr, userID).Scan(&ua.UserID, &ua.Status, &ua.CreatedAt, &ua.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &ua, nil
}

// User returns the User associated with the [UserActive]'s (UserID).
//
// Generated from foreign key 'user_actives_user_id_fkey'.
func (ua *UserActive) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, ua.UserID)
}
