// Package xo contains generated code for schema 'public'.
package xo

// Code generated by dbtpl. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// BunMigration represents a row from 'public.bun_migrations'.
type BunMigration struct {
	ID         int64          `json:"id"`          // id
	Name       sql.NullString `json:"name"`        // name
	GroupID    sql.NullInt64  `json:"group_id"`    // group_id
	MigratedAt time.Time      `json:"migrated_at"` // migrated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [BunMigration] exists in the database.
func (bm *BunMigration) Exists() bool {
	return bm._exists
}

// Deleted returns true when the [BunMigration] has been marked for deletion
// from the database.
func (bm *BunMigration) Deleted() bool {
	return bm._deleted
}

// Insert inserts the [BunMigration] to the database.
func (bm *BunMigration) Insert(ctx context.Context, db DB) error {
	switch {
	case bm._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case bm._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.bun_migrations (` +
		`name, group_id, migrated_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, bm.Name, bm.GroupID, bm.MigratedAt)
	if err := db.QueryRowContext(ctx, sqlstr, bm.Name, bm.GroupID, bm.MigratedAt).Scan(&bm.ID); err != nil {
		return logerror(err)
	}
	// set exists
	bm._exists = true
	return nil
}

// Update updates a [BunMigration] in the database.
func (bm *BunMigration) Update(ctx context.Context, db DB) error {
	switch {
	case !bm._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case bm._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.bun_migrations SET ` +
		`name = $1, group_id = $2, migrated_at = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, bm.Name, bm.GroupID, bm.MigratedAt, bm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, bm.Name, bm.GroupID, bm.MigratedAt, bm.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [BunMigration] to the database.
func (bm *BunMigration) Save(ctx context.Context, db DB) error {
	if bm.Exists() {
		return bm.Update(ctx, db)
	}
	return bm.Insert(ctx, db)
}

// Upsert performs an upsert for [BunMigration].
func (bm *BunMigration) Upsert(ctx context.Context, db DB) error {
	switch {
	case bm._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.bun_migrations (` +
		`id, name, group_id, migrated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, group_id = EXCLUDED.group_id, migrated_at = EXCLUDED.migrated_at `
	// run
	logf(sqlstr, bm.ID, bm.Name, bm.GroupID, bm.MigratedAt)
	if _, err := db.ExecContext(ctx, sqlstr, bm.ID, bm.Name, bm.GroupID, bm.MigratedAt); err != nil {
		return logerror(err)
	}
	// set exists
	bm._exists = true
	return nil
}

// Delete deletes the [BunMigration] from the database.
func (bm *BunMigration) Delete(ctx context.Context, db DB) error {
	switch {
	case !bm._exists: // doesn't exist
		return nil
	case bm._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.bun_migrations ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, bm.ID)
	if _, err := db.ExecContext(ctx, sqlstr, bm.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	bm._deleted = true
	return nil
}

// BunMigrationByID retrieves a row from 'public.bun_migrations' as a [BunMigration].
//
// Generated from index 'bun_migrations_pkey'.
func BunMigrationByID(ctx context.Context, db DB, id int64) (*BunMigration, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, group_id, migrated_at ` +
		`FROM public.bun_migrations ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	bm := BunMigration{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&bm.ID, &bm.Name, &bm.GroupID, &bm.MigratedAt); err != nil {
		return nil, logerror(err)
	}
	return &bm, nil
}
